Q1
	(A) 6 choices each time. 
	If order of die rolls matters then 6^3 = 216
	
	(B) 5^3 = 125 ways to not get a single 2
		216 - 125 = 91 = number of events where atleast single 2
		91/216 = .421 percentage of where atleast one 2
		
	(c)
		function out = tripleDieRoll(reps)
			out = simulation(reps);
		end

		function out = dieRoll(sides,reps)
			out  = randi([1 sides],1,reps);
		end


		function prob = simulation(reps)
			count = 0;
			for index = 1:reps
				currentRolls = dieRoll(6,3);
				for throwno = 1:3
					if currentRolls(throwno) == 2
						count = count + 1;
						break;
					end
				end
			end
			prob = (count/reps)*100;
		end
		
		call with tripleDieRoll(ARBIRTARY_NUMBER_OF_SIMULATIONS)
		
	(d) 6 + 6 + 5 = 17 which is the only way to actually 
		get 17 but also can be in any order so 3/72
		3/216 = 0.014
		
	(e) Since purely a sum we don't really need to use conditional probability we can just consider 2 dice rolls that sum to 12-1 = 11
	{6,5}, {5,6} 
	2/(6^2) = 0.056
	
Q2
	(a) 1/6 chance of a 5 if 6 sided and 1/20 if 20 sided
	1/6 chance of a 1 and 5/6 chance of anything else in first throw
	
	(1/6)*(1/6) + (5/6)*(1/20) = .06894
	
	(b) If 6 sided die then impossible hence
	(1/6)*0 + (5/6)*(1/20) = 
	
Q3
	Probability of guilt given characteristic = P(E|F)
	Probability of guilt = 60% = P(E)
	Probability of characteristic = 20%	 = P(F)
	Proabability of characteristic given guilt = P(F|E) = 100%
	P(E|F) = (.6*1)/.2
	
	P(E|F)*P(F) = P(F|E)*P(E)
	
	Probability of brown hair P(F) = .2*.4 + .6*1 = 0.68
	Probability of being criminal given brown hair = ?
	Probability of being criminal P(E) = .6
	Probability of brown hair given criminal = 1
	.6/.68 = 0.882
	
Q4
	P(Observe|Location) = given
	P(Location) = given
	P(Location| Observe) = unkown
	P(Observation) = 100% given infinite time
	Assume that all prob stays constant till observation occurs and that all tiles have same P(Observation)
	
	(P(O|L)*P(L))/P(O) = P(L|O)
	
	answer = 
    0.0375    0.0950    0.0375    0.0025
    0.0025    0.0750    0.0475    0.0375
    0.0005    0.0025    0.0750    0.0475
    0.0005    0.0005    0.0050    0.0375
	
	function resGrid = cell_tracker(locGrid, obsGivenLocGrid)
		[rowLen,colLen] = size(locGrid);
		if [rowLen,colLen] ~= size(obsGivenLocGrid)
			error("grid dimensions are different");
		end
		resGrid = zeros(rowLen,colLen);
		for i = 1:rowLen
			for j = 1:colLen
				% probability of observation is taken to be 100%
				% We assume no probability changes in time until observation
				resGrid(i,j) = calcCondLocProb(locGrid(i,j), ...
					obsGivenLocGrid(i,j),1);
			end
		end
	end

	function res = calcCondLocProb(locProb,obsGivenLocProb,obsProb)
		res = (obsGivenLocProb*locProb)/obsProb;
	end
	
	Iterates over both grids and applies formula given above to both grids

	
	
	
		
	